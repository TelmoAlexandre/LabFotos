@model LabFoto.Models.Tables.Galeria

@using Microsoft.Extensions.Options;
@inject IOptions<AppSettings> AppSettings

@{
    ViewData["Title"] = "Detalhes";
}


<form id="uploader">
    <div class="mb-2 ui attached segment">
        <div class="ui grid">
            <div class="eight wide column">
                <p class="ui blue ribbon label mb-3">Galeria</p>
                <a asp-action="Edit" asp-route-id="@Model.ID" asp-route-returnUrl="Details/@Model.ID" class="ml-2 ui basic mini button">
                    <i class="edit icon"></i> Editar
                </a>
                <dl class="row mb-0">
                    <dt class="col-sm-4">
                        @Html.DisplayNameFor(model => model.Nome)
                    </dt>
                    <dd class="col-sm-8">
                        @Html.DisplayFor(model => model.Nome)
                    </dd>
                    <dt class="col-sm-4">
                        @Html.DisplayNameFor(model => model.DataDeCriacao)
                    </dt>
                    <dd class="col-sm-8">
                        @Html.DisplayFor(model => model.DataDeCriacao)
                    </dd>
                    <dt class="col-sm-4">
                        @Html.DisplayNameFor(model => model.Servico)
                    </dt>
                    <dd class="col-sm-8">
                        <a href="/Servicos/Details/@Model.Servico.ID" target="_blank" class="plainTextLink font-weight-bold">@Model.Servico.Nome</a>
                    </dd>
                </dl>
            </div>
            <div class="eight wide column">
                <div id="progressBarsContainer" class="mb-2 mt-4"></div>
            </div>
        </div>
        <div>
            @if (Model.Galerias_Metadados.Count() > 0)
            {
                <span class="font-weight-bold">Metadados</span>
                <div class="ui labels mt-2">
                    @foreach (var metadado in Model.Galerias_Metadados)
                    {
                        <span class="ui basic label">
                            <i class="pencil alternate icon"></i> @metadado.Metadado.Nome
                        </span>
                    }
                </div>
            }
            else
            {
                <span>Não existem metadados.</span>
            }
        </div>
        <div class="ui two top attached buttons mt-3">
            <label for="fileInput" class="ui primary button" id="btnFileInput">
                <i class="plus icon"></i> Selecionar Fotografia(s) <span id="fileCount"></span>
            </label>
            <input id="fileInput" onchange="updateSelectedFiles()" type="file" name="files" multiple hidden>
            <button type="submit" class="ui green button" id="btnUploadSubmit"><i class="cloud upload icon"></i> Carregar</button>
            <span class="ui green button pointer" id="btnFinishUpload" style="display:none;"><i class="check icon"></i> Finalizar</span>
        </div>
    </div>
</form>

<div class="mt-4">
    <div class="ui small basic icon buttons float-right">
        <button class="ui button" onclick="selectAllCB()"><i class="check circle icon"></i></button>
        <button class="ui button" onclick="clearCB()"><i class="check circle outline icon"></i></button>
        <button class="ui button" onclick="confirmDelete(null)" id="btnDelete" disabled><i class="trash alternate outline icon"></i></button>
    </div>
    <br />
    <div id="thumbnails" class="mt-4">
        <div class="my-gallery" id="my-gallery" itemscope>
            <div class="ui six doubling stackable cards mt-2" id="photosContainer"></div>
        </div>
    </div>
</div>

<div class="ui basic mini modal" id="confirmDelete">
    <div class="content">
        <p>Tem a certeza que pretende eliminar esta(s) fotografia(s)?</p>
    </div>
    <div class="actions">
        <div class="ui red basic cancel inverted button">
            <i class="remove icon"></i>
            Não
        </div>
        <div class="ui green ok inverted button" onclick="">
            <i class="checkmark icon"></i>
            Sim
        </div>
    </div>
</div>

<!-- #region Photoswipe -->
@{
    /*
        Modal utilizado na biblioteca PhotoSwipe
     */
}
<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

    <!-- Background of PhotoSwipe.
         It's a separate element, as animating opacity is faster than rgba(). -->
    <div class="pswp__bg"></div>

    <!-- Slides wrapper with overflow:hidden. -->
    <div class="pswp__scroll-wrap">

        <!-- Container that holds slides. PhotoSwipe keeps only 3 slides in DOM to save memory. -->
        <!-- don't modify these 3 pswp__item elements, data is added later on. -->
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>

        <!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. -->
        <div class="pswp__ui pswp__ui--hidden">

            <div class="pswp__top-bar">

                <!--  Controls are self-explanatory. Order can be changed. -->

                <div class="pswp__counter"></div>

                <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>

                <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>

                <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

                <!-- Preloader demo https://codepen.io/dimsemenov/pen/yyBWoR -->
                <!-- element will get class pswp__preloader--active when preloader is running -->
                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                        <div class="pswp__preloader__cut">
                            <div class="pswp__preloader__donut"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div>
            </div>

            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>

            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>

            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>

        </div>

    </div>

</div>

<!-- #endregion -->

@section scripts
{
    <script>
        var fileBar = `<div class="ui green active progress mb-0" id="fileBar" style="display:none;"><div class="bar"><div class="progress"></div></div></div>`;
        var totalBar = `<div class="ui indicating progress" data-value="0" id="totalBar" style="display:none;"><div class="bar"><div class="progress"></div></div><div class="label">A processar...</div></div>`;
        var placeHolder = `<div class="ui six doubling stackable mt-2" id="photosContainer"><div class="ui placeholder tiny segment"><div class="ui icon header"><i class="images outline icon" style="height: auto;"></i>Não existem fotografias.</div></div></div>`;

        var photos = [];

        $(document).ready(function ()
        {
            // Começar a pedir fotografias
            getPhotos(1);

            // Iniciar a galeria do PhotoSwipe
            initPhotoSwipeFromDOM('.my-gallery');
        });

        function pushToPhotos(newPhotoId)
        {
            // Caso o url exista no array, retira-lo
            if (photos.includes(newPhotoId)) {
                let newArray = [];
                photos.forEach((photo) => {
                    if (photo !== newPhotoId) {
                        newArray.push(photo);
                    }
                });
                photos = newArray;
            } else {
                photos.push(newPhotoId);
            }

            // Alterar o botão check para refletir que a foto [está/não está] selecionada
            $(`#cb_${newPhotoId}`).toggleClass("blue")
                .children("i").toggleClass("outline blue");
            // Desabilitar os botões caso não existam fotos selecionadas
            $("#btnDelete").attr("disabled", (photos.length === 0)? true : false);
        }

        function confirmDelete(id)
        {
            $('.btnOptions').popup('hide');
            $("#confirmDelete").modal({
                closable: false,
                onDeny: function () {
                    $("#confirmDelete").modal('hide');
                },
                onApprove: function ()
                {
                    deletePhotos(id);
                },
                transition: 'scale'
            }).modal('show');
        }

        function deletePhotos(id)
        {
            var toSend = [];

            // Se houver parametros, envia-os, senão envia o array photos
            if (id !== null)
                toSend.push(id);
            else
                toSend = photos;

            if (toSend.length > 0)
            {
                $("#btnDelete").addClass("loading").attr("disabled", true);

                $.ajax({
                    type: "POST",
                    url: siteUrl + "/Galerias/DeleteFiles",
                    data: {
                        "photosIds": toSend,
                        "X-Requested-With": "XMLHttpRequest"
                    },
                    success: function (resp)
                    {
                        $("#btnDelete").removeClass("loading");

                        if (resp.success)
                        {
                            notifyUser('success', 'Apagado com sucesso.');
                            $("#photosContainer").html("");
                            getPhotos(1);
                        }
                        else
                        {
                            notifyUser('error', 'Erro ao apagar.');
                        }

                        // Reset da variável
                        photos = [];
                    },
                    error: function ()
                    {
                        $("#btnDelete").removeClass("loading").attr("disabled", false);
                        notifyUser('error', 'Erro ao apagar.');
                    }
                });
            }
            else
            {
                notifyUser('warning', 'Não existem fotografias selecionadas.');
            }
        }

        function getPhotos(page)
        {
            $("#thumbnails").append(loader);
            $.ajax({
                type: "GET",
                url: siteUrl + "/Galerias/Thumbnails/@Model.ID?page="+page,
                success: function (resp) {
                    if (resp.noMorePhotos == null) // Enquanto houver mais fotografias a serem carregadas
                    {
                        $("#photosContainer").append(resp);
                        activatePopups();
                        // Pedir mais fotografias ao servidor
                        page++;
                        getPhotos(page);
                    }
                    else
                    {
                        if (isEmpty("#photosContainer")) // Caso não exitam fotografias na galeria
                        {
                            $("#my-gallery").html(placeHolder); // Mostra um placeholder
                        }
                    }
                    $("#loader").remove(); // Remove a barra de loading
                },
                error: function () {
                    $("#thumbnails").html(`
                        <div class="ui negative message mt-3">
                          <div class="header">
                            Ocorreu um erro
                          </div>
                          <p>Infelizmente não foi possível carregar as fotografias.</p>
                        </div>
                    `);
                }
            });
        }

        function isEmpty(node)
        {
            return ($(`${node}`).children().length === 0);
        }

        document.getElementById('uploader').onsubmit = function (e)
        {
            e.preventDefault();

            var files = document.getElementById('fileInput').files;

            if (files.length != 0) {

                // Desabilitar o botão de upload
                $("#btnFinishUpload").hide()
                $("#btnUploadSubmit")
                    .attr("disabled", true)
                    .addClass("disabled loading");
                $("#btnFileInput")
                    .attr("disabled", true)
                    .addClass("disabled");

                initProgressBars(files.length);
                upload(files, 0);
            }
        }

        document.getElementById('btnFinishUpload').onclick = function (e)
        {
            e.preventDefault();

            // Esconder as barras de progresso, preparar os botões para um novo upload
            $("#fileBar").fadeOut();
            $("#totalBar").fadeOut();
            $("#btnFinishUpload").hide();
            $("#btnUploadSubmit").show();
            $("#btnFileInput")
                .attr("disabled", false)
                .removeClass("disabled");
        }

        function activatePopups()
        {
            $('.btnOptions')
                .popup({
                    hoverable  : true,
                    on: 'click',
                    setFluidWidth: false,
                    position   : 'bottom left',
                    delay: {
                        show: 300,
                        hide: 800
                    }
                })
            ;
        }

        function upload(files, i)
        {
            $.ajax({
                type: "GET",
                url: siteUrl + `/Galerias/UploadSession?size=${files[i].size}&name=${files[i].name}`,
                success: function (resp)
                {
                    if (resp.success)
                    {
                        // Visto que foi recebido um url de upload, fazer o upload do ficheiro.
                        uploadFile(files, i, resp);
                    }
                    else
                    {
                        notifyUser('error', resp.error);
                    }
                },
                error: function ()
                {
                    notifyUser('error', 'Ocorreu um erro ao contactar o servidor.');
                }
            });
        }

        function uploadFile(files, i, json)
        {
            // Recolher o tamanho de cada fragmento do appsettings.json
            var fragmentSize = @AppSettings.Value.UploadFragmentSizeInMB;

            var file = files[i];
            var loaded = 0;
            var step = fragmentSize * 1024 * 1024;
            var total = file.size;
            var reader = new FileReader();
            var blob = file.slice(loaded, step); //a single chunk in starting of step size
            var chunksize = blob.size;
            reader.readAsBinaryString(blob);   // reading that chunk. when it read it, onload will be invoked

            reader.onload = function (e) {

                $.ajax({
                    url: json.url,
                    type: "PUT",
                    beforeSend: function (request) {
                        request.setRequestHeader("Content-Range", `bytes ${loaded}-${loaded + chunksize - 1}/${total}`);
                    },
                    contentType: false,
                    processData: false,
                    data: blob                    // d is the chunk got by readAsBinaryString(...)
                }).done(function (resp) {           // if 'd' is uploaded successfully then ->

                    loaded += step;

                    if (loaded <= total) {            // if file is not completely uploaded

                        blob = file.slice(loaded, loaded + step);  // getting next chunk
                        chunksize = blob.size;
                        reader.readAsBinaryString(blob);        //reading it through file reader which will call onload again. So it will happen recursively until file is completely uploaded.
                        updateFileBar((loaded * 100) / total);

                    } else {                // if file is uploaded completely

                        loaded = total;            // just changed loaded which could be used to show status.
                        informServerOfImage(resp, json.contaId); // Enviar resposta da onedrive para o servidor para que este crie o ficheiro na BD
                        updateFileBar(100);
                        updateTotalBar();

                        // Enquanto houver ficheiros para dar upload
                        if (i < files.length - 1) {
                            // Dar upload ao próximo ficheiro
                            i++;
                            upload(files, i);
                        } else {
                            uploadCompleted();
                        }
                    }
                });
            };
        }

        function informServerOfImage(resp, contaId)
        {
            $.ajax({
                url: siteUrl + "/Galerias/RegisterFile",
                type: "POST",
                data: {
                    "galeriaId": "@Model.ID",
                    "contaId": contaId,
                    "fileOnedriveId": resp.id,
                    "fileOnedriveName": resp.name
                },
                success: function (resp) {

                    // Quando não existem fotografias, mostra-se um placeholder, quando forem adicionadas as primeiras fotografias,
                    // adicionar a classe card para as mostrar em pequenos cartões
                    if ($("#photosContainer").hasClass("cards"))
                    {
                        $("#photosContainer").append(resp);
                        activatePopups();
                    }
                    else
                    {
                        $("#photosContainer").addClass("cards");
                        $("#photosContainer").html(resp); // Substitui o placeholder "Nao existem fotografias" pela primeira fotografia
                    }

                    // Iniciar a galeria do PhotoSwipe
                    initPhotoSwipeFromDOM('.my-gallery');
                    $('.ui.checkbox').checkbox();
                }
            });
        }

        function uploadCompleted()
        {
            notifyUser('success', 'Fotografia(s) adicionada(s) com sucesso!.');

            // Remover os ficheiros carregados do inputFile
            var fileInput = $("#fileInput");
            fileInput.replaceWith(fileInput.val('').clone(true)); // Substituir o input file com um clone seu para limpar os ficheiros selecionados
            updateSelectedFiles();

            // Reactivar os botões novamente
            $("#btnUploadSubmit").hide();
            $("#btnFinishUpload").show();
            $("#btnUploadSubmit")
                .attr("disabled", false)
                .removeClass("disabled loading");
        }

        function updateSelectedFiles()
        {
            var count = document.getElementById('fileInput').files.length;
            $("#fileCount").html((count!=0)? ` - ${count} Selecionada(s)` : "");
        }

        function initProgressBars(total)
        {
            // Dar reset às progress bars
            $("#progressBarsContainer").html(fileBar + "<br />" + totalBar);

            // Definir o total de ficheiros a serem carregados
            document.getElementById('totalBar').setAttribute("data-total", total);

            $('#fileBar').show();
            $('#totalBar').show()
                .progress({
                    label: 'ratio',
                    text: {
                        ratio: '{value} de {total}',
                        active: '{value} de {total} Carregadas',
                        success : '{total} Fotografia(s) Carregada(s)!'
                    }
                }
            );
        }

        function updateFileBar(percent)
        {
            $('#fileBar')
                .progress({
                    percent: percent,
                    text: {
                      active  : 'A carregar...',
                      success : 'Carregado!'
                    }
                }
            );
        }

        function updateTotalBar()
        {
            $('#totalBar')
                .progress('increment')
            ;
        }

        function clearCB()
        {
            $(".btnCB.blue").click();
    }

        function selectAllCB()
        {
            clearCB();
             $(".btnCB").click();
        }

        function download(url)
        {
            var link = document.createElement("a");
            link.download = name;
            link.href = url;
            link.style.display = "none";
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            delete link;
        }

        function downloadSelected()
        {
            let links = urls;
            clearCB();
            if (links.length != 0) {
                let delay = 0;
                links.forEach(url => {
                    if (url !== '') {
                        setTimeout(() => {
                            var link = document.createElement("a");
                            link.download = name;
                            link.href = url;
                            link.style.display = "none";
                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);
                            delete link;
                        }, delay);
                        delay += 8000;
                    }
                });
            }
        }
    </script>

    @{/* Caso exista Feedback a ser fornecido, apresenta uma notficação Noty */}
    @if (ViewData["Feedback"] != null)
    {
        <script>
            document.addEventListener('DOMContentLoaded', function ()
            {
                notifyUser('success', '@ViewData["Feedback"]');
            }, false);
        </script>
    }
}
