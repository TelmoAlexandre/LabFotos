@model LabFoto.Models.Tables.Galeria

@{
    ViewData["Title"] = "Details";
}

<div class="mb-4">
    <form method="post" enctype="multipart/form-data" asp-controller="Galerias" asp-action="UploadFiles" asp-route-galeriaId="@Model.ID">
        <div class="ui attached segment">
            <p class="ui blue ribbon label mb-3">Galeria</p>
            <dl class="row">
                <dt class="col-sm-2">
                    @Html.DisplayNameFor(model => model.Nome)
                </dt>
                <dd class="col-sm-10">
                    @Html.DisplayFor(model => model.Nome)
                </dd>
                <dt class="col-sm-2">
                    @Html.DisplayNameFor(model => model.DataDeCriacao)
                </dt>
                <dd class="col-sm-10">
                    @Html.DisplayFor(model => model.DataDeCriacao)
                </dd>
                <dt class="col-sm-2">
                    @Html.DisplayNameFor(model => model.Servico)
                </dt>
                <dd class="col-sm-10">
                    @Html.DisplayFor(model => model.Servico.Nome)
                </dd>
            </dl>
        </div>
        <div class="ui two bottom attached buttons">
            <label for="file-upload" class="ui primary button">
                <i class="plus icon"></i> Selecionar fotografias
            </label>
            <input id="file-upload" type="file" name="files" multiple hidden>
            <button type="submit" class="ui green button"><i class="cloud upload icon"></i> Carregar</button>
        </div>
    </form>
</div>

<button onclick="downloadSelected()" class="ui button">download</button>
<button onclick="selectAllCB()" class="ui button">Selecionar todas</button>
<button onclick="clearCB()" class="ui button">Remover todas</button>

<form id="uploader">
    <input id="fileInput" type="file" multiple>
    <input type="submit" value="Upload file" />
</form>

<div id="thumbnails" class="mt-4">
</div>

@{
    /*
        Modal utilizado na biblioteca PhotoSwipe
     */
}
<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

    <!-- Background of PhotoSwipe.
         It's a separate element, as animating opacity is faster than rgba(). -->
    <div class="pswp__bg"></div>

    <!-- Slides wrapper with overflow:hidden. -->
    <div class="pswp__scroll-wrap">

        <!-- Container that holds slides. PhotoSwipe keeps only 3 slides in DOM to save memory. -->
        <!-- don't modify these 3 pswp__item elements, data is added later on. -->
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>

        <!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. -->
        <div class="pswp__ui pswp__ui--hidden">

            <div class="pswp__top-bar">

                <!--  Controls are self-explanatory. Order can be changed. -->

                <div class="pswp__counter"></div>

                <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>

                <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>

                <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

                <!-- Preloader demo https://codepen.io/dimsemenov/pen/yyBWoR -->
                <!-- element will get class pswp__preloader--active when preloader is running -->
                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                        <div class="pswp__preloader__cut">
                            <div class="pswp__preloader__donut"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div>
            </div>

            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>

            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>

            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>

        </div>

    </div>

</div>

@section scripts
{
    <script>
        var loader = `<div class="ui active centered indeterminate text inline loader unselectable" style="margin-top:100px;">A carregar...</div>`;
        var urls = [];

        function uploadSuccess() {
            window.location.href = siteUrl + '/Galerias/Details/@Model.ID';
        }

        document.getElementById('uploader').onsubmit = function (e) {
            e.preventDefault();

            var fileInput = document.getElementById('fileInput');
            Array.from(fileInput.files).forEach(f => {

                uploadFile(f);

            });

            return false;
        }

        function uploadFile(file) {

            var loaded = 0;
            var step = 2 * 1024 * 1024;
            var total = file.size;
            var reader = new FileReader();
            var blob = file.slice(loaded, step); //a single chunk in starting of step size
            var chunksize = blob.size;
            reader.readAsBinaryString(blob);   // reading that chunk. when it read it, onload will be invoked

            reader.onload = function (e) {

                $.ajax({
                    url: "https://politecnicotomar-my.sharepoint.com/personal/aluno19089_ipt_pt/_api/v2.0/drives/b!0812_G3q10uofJYDjbiF50gxK5lECPtEqi3cKXzbQsT29-ASFmlYSqg3p9xBheG7/items/0127OBJ5N6Y2GOVW7725BZO354PWSELRRZ/uploadSession?guid='51f2b315-a3ac-45dd-bd27-c3334994cb13'&path='~tmp1D_testsss.cr2'&overwrite=True&rename=False&dc=0&tempauth=eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTBmZjEtY2UwMC0wMDAwMDAwMDAwMDAvcG9saXRlY25pY290b21hci1teS5zaGFyZXBvaW50LmNvbUAyMWU5MGRmYy01NGYxLTRiMjEtOGYzYi03ZmI5Nzk4ZWQyZTAiLCJpc3MiOiIwMDAwMDAwMy0wMDAwLTBmZjEtY2UwMC0wMDAwMDAwMDAwMDAiLCJuYmYiOiIxNTYzNzM5MDU0IiwiZXhwIjoiMTU2MzgyNTQ1NCIsImVuZHBvaW50dXJsIjoiQXJuTzRGOWVITFcrWDBRNU9YZ213YzN1ZnVEeVdwc1BPaU82eFpHRFpmbz0iLCJlbmRwb2ludHVybExlbmd0aCI6IjMxMSIsImlzbG9vcGJhY2siOiJUcnVlIiwiY2lkIjoiTURneFltTmhNR1V0T1RGaE5DMDBOREV5TFRnM05UQXRZVGswTURnd1kyRTRPREJqIiwidmVyIjoiaGFzaGVkcHJvb2Z0b2tlbiIsInNpdGVpZCI6IlptTTNObU5rWkRNdFpXRTJaQzAwWW1RM0xXRTROMk10T1RZd016aGtZamc0TldVMyIsImFwcF9kaXNwbGF5bmFtZSI6IkxhYkZvdG8iLCJnaXZlbl9uYW1lIjoiVGVsbW8iLCJmYW1pbHlfbmFtZSI6IkFsZXhhbmRyZSIsInNpZ25pbl9zdGF0ZSI6IltcImttc2lcIl0iLCJhcHBpZCI6IjJkYTc0ODRjLTllZWEtNDlhMy1iMzM3LWY1OWE5N2Y3OWU0NyIsInRpZCI6IjIxZTkwZGZjLTU0ZjEtNGIyMS04ZjNiLTdmYjk3OThlZDJlMCIsInVwbiI6ImFsdW5vMTkwODlAaXB0LnB0IiwicHVpZCI6IjEwMDM3RkZFOTA4OTQ2MzQiLCJjYWNoZWtleSI6IjBoLmZ8bWVtYmVyc2hpcHwxMDAzN2ZmZTkwODk0NjM0QGxpdmUuY29tIiwic2NwIjoibXlmaWxlcy5yZWFkIGFsbGZpbGVzLnJlYWQgbXlmaWxlcy53cml0ZSBhbGxmaWxlcy53cml0ZSIsInR0IjoiMiIsInVzZVBlcnNpc3RlbnRDb29raWUiOm51bGx9.dXB2alVFdHFZaXlvb05mQWpZd1MvQ3JjeUpQbXFSNlNDVElSMkpzc3RSVT0",
                    type: "PUT",
                    beforeSend: function (request) {
                        request.setRequestHeader("Authorization", "bearer eyJ0eXAiOiJKV1QiLCJub25jZSI6IkFRQUJBQUFBQUFBUDB3TGxxZExWVG9PcEE0a3d6U254UnJsNHpIMm9Ua3BtaWw2eFB5OW1iZXlTVDJ6TF9PWmQwejBNYnhHLWU4azFiMy1NYU05ZkhDRkdYSWNjUUQ2cWc4WUdoZGFYZ1FyQ2tEY1pSNmJfdENBQSIsImFsZyI6IlJTMjU2IiwieDV0IjoidTRPZk5GUEh3RUJvc0hqdHJhdU9iVjg0TG5ZIiwia2lkIjoidTRPZk5GUEh3RUJvc0hqdHJhdU9iVjg0TG5ZIn0.eyJhdWQiOiJodHRwczovL2dyYXBoLm1pY3Jvc29mdC5jb20iLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC8yMWU5MGRmYy01NGYxLTRiMjEtOGYzYi03ZmI5Nzk4ZWQyZTAvIiwiaWF0IjoxNTYzNzM4NTg3LCJuYmYiOjE1NjM3Mzg1ODcsImV4cCI6MTU2Mzc0MjQ4NywiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFTUUEyLzhNQUFBQTA2NUY4WEdnRGpDWGdkd1dQVEQwU3hkZTBJdmJHcWJENVhUeEJObXlvVlk9IiwiYW1yIjpbInB3ZCJdLCJhcHBfZGlzcGxheW5hbWUiOiJMYWJGb3RvIiwiYXBwaWQiOiIyZGE3NDg0Yy05ZWVhLTQ5YTMtYjMzNy1mNTlhOTdmNzllNDciLCJhcHBpZGFjciI6IjEiLCJmYW1pbHlfbmFtZSI6IkFsZXhhbmRyZSIsImdpdmVuX25hbWUiOiJUZWxtbyIsImlwYWRkciI6IjE4OC4yNTEuMjI2LjEzOCIsIm5hbWUiOiJUZWxtbyBPbGl2ZWlyYSBBbGV4YW5kcmUiLCJvaWQiOiJjNzJkZTU2Yi01ZGZlLTQzMjgtOTMwZC0wNGEzZDcyZjI1MzMiLCJvbnByZW1fc2lkIjoiUy0xLTUtMjEtMzEwMDY3Mzc0Ni00MjcwNTgzNjI2LTI0MjUyNDIwNDktMTc4MjkiLCJwbGF0ZiI6IjMiLCJwdWlkIjoiMTAwMzdGRkU5MDg5NDYzNCIsInNjcCI6IkZpbGVzLlJlYWQgRmlsZXMuUmVhZC5BbGwgRmlsZXMuUmVhZFdyaXRlIEZpbGVzLlJlYWRXcml0ZS5BbGwgcHJvZmlsZSBvcGVuaWQgZW1haWwiLCJzaWduaW5fc3RhdGUiOlsia21zaSJdLCJzdWIiOiJZdVJhQVBLRVlKeU94eXlFY21kUjJNZG5hTE85NDk1QTNkQ2dFWlQ5MzlBIiwidGlkIjoiMjFlOTBkZmMtNTRmMS00YjIxLThmM2ItN2ZiOTc5OGVkMmUwIiwidW5pcXVlX25hbWUiOiJhbHVubzE5MDg5QGlwdC5wdCIsInVwbiI6ImFsdW5vMTkwODlAaXB0LnB0IiwidXRpIjoiUWNqOVJENURDMFNpcVh5QVVZdFZBQSIsInZlciI6IjEuMCIsInhtc19zdCI6eyJzdWIiOiJld2hsazdSYmhWN25YbTc0dTVTQUlQTjcwYktpbnBMWE1OQlB3VEFTUXRZIn0sInhtc190Y2R0IjoxNDI5MjY3MjA4fQ.ATYEHa02zY7ex3qYEC6edSQ1Fb7XSBQk3N5DqJPSCzzLQxzm7hzglp974ic41Z-HbaA58L-35VQdbZU5v84inu9oJTvs-SghqPmqpqQn_R4dGfkqSZDhpkRJfAt3bjW9UDCGriZ2MRRM-QPv-qGK9Nd4Tth8V7cSEZGOfUjDsk8SsJfcK8J9u5EgTrrnznsqlZcPmOif8uodHVEPKMwX04HREmtC2QdE51FYcNL5eH8ew7ZkWHlRJBx6xhigVxmwKS91vnYdZw6jnvXOX4HV_Kc6iKYwY0tJ6uNcjbO0sP1mzCqJ6oXMMM_T0O70j24Jrb2r-6QPfDWVa6-zwLcEbQ");
                        request.setRequestHeader("Content-Range", `bytes ${loaded}-${loaded + chunksize - 1}/${total}`);
                    },
                    contentType: false,
                    processData: false,
                    data: blob                    // d is the chunk got by readAsBinaryString(...)
                }).done(function (r) {           // if 'd' is uploaded successfully then ->

                    loaded += step;

                    if (loaded <= total) {            // if file is not completely uploaded
                        blob = file.slice(loaded, loaded + step);  // getting next chunk
                        chunksize = blob.size;
                        reader.readAsBinaryString(blob);        //reading it through file reader which will call onload again. So it will happen recursively until file is completely uploaded.
                    } else {                       // if file is uploaded completely
                        loaded = total;            // just changed loaded which could be used to show status.
                    }
                })
            };

        }

        $(document).ready(function () {
            $("#thumbnails").html(loader);

            $.ajax({
                type: "GET",
                url: siteUrl + "/Galerias/Thumbnails/@Model.ID",
                success: function (resp) {
                    $("#thumbnails").html(resp);
                    // Iniciar a galeria do PhotoSwipe
                    initPhotoSwipeFromDOM('.my-gallery');
                    $('.ui.checkbox').checkbox();
                },
                error: function () {
                    $("#thumbnails").html(`
                        <div class="ui negative message mt-3">
                          <div class="header">
                            Ocorreu um erro
                          </div>
                          <p>Infelizmente não foi possível carregar as fotografias.</p>
                        </div>
                    `);
                }
            });
        });

    function clearCB() {
        $(".ui.toggle.checkbox.checked").click();
    }
    function selectAllCB() {
        clearCB();
         $(".ui.toggle.checkbox").click();
    }

        function pushToURLs(newUrl) {
            // Caso o url exista no array, retira-lo
            if (urls.includes(newUrl)) {
                let newArray = [];
                urls.forEach((url) => {
                    if (url !== newUrl) {
                        newArray.push(url);
                    }
                });
                urls = newArray;
            } else {
                urls.push(newUrl);
            }
        }

    function download(url) {
        var link = document.createElement("a");
        link.download = name;
        link.href = url;
        link.style.display = "none";
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        delete link;
    }

    function downloadSelected() {
        let links = urls;
        clearCB();
        if (links.length != 0) {
            let delay = 0;
            links.forEach(url => {
                if (url !== '') {
                    setTimeout(() => {
                        var link = document.createElement("a");
                        link.download = name;
                        link.href = url;
                        link.style.display = "none";
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                        delete link;
                    }, delay);
                    delay += 8000;
                }
            });
        }
    }

    </script>
}
