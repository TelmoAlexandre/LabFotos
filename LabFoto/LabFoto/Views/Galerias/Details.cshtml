@model LabFoto.Models.Tables.Galeria

@{
    ViewData["Title"] = "Details";
}


    <form id="uploader">
        <div class="mb-4 ui attached segment">
            <div class="ui grid">
                <div class="eight wide column">
                    <p class="ui blue ribbon label mb-3">Galeria</p>
                    <dl class="row">
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => model.Nome)
                        </dt>
                        <dd class="col-sm-10">
                            @Html.DisplayFor(model => model.Nome)
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => model.DataDeCriacao)
                        </dt>
                        <dd class="col-sm-10">
                            @Html.DisplayFor(model => model.DataDeCriacao)
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => model.Servico)
                        </dt>
                        <dd class="col-sm-10">
                            @Html.DisplayFor(model => model.Servico.Nome)
                        </dd>
                    </dl>
                </div>
                <div class="eight wide column">
                    <div id="progressBarsContainer" class="mb-2 mt-4"></div>
                </div>
            </div>
            <div class="ui two bottom attached buttons">
                <label for="fileInput" class="ui primary button">
                    <i class="plus icon"></i> Selecionar Fotografias <span id="fileCount"></span>
                </label>
                <input id="fileInput" type="file" name="files" multiple hidden>
                <button type="submit" class="ui green button"><i class="cloud upload icon"></i> Carregar</button>
            </div>
        </div>
    </form>

<button onclick="downloadSelected()" class="ui button">download</button>
<button onclick="selectAllCB()" class="ui button">Selecionar todas</button>
<button onclick="clearCB()" class="ui button">Remover todas</button>


<div id="thumbnails" class="mt-4">
    @if (Model.Fotografias.Count() == 0)
    {
        <div class="ui placeholder tiny segment">
            <div class="ui icon header">
                <i class="images outline icon" style="height: auto;"></i>
                Não existem fotografias.
            </div>
        </div>
    }
    else
    {
        <div class="my-gallery" id="my-gallery" itemscope>
            <div class="ui six doubling stackable cards mt-2" id="photosContainer">
            </div>
        </div>
    }
</div>

@{
    /*
        Modal utilizado na biblioteca PhotoSwipe
     */
}
<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

    <!-- Background of PhotoSwipe.
         It's a separate element, as animating opacity is faster than rgba(). -->
    <div class="pswp__bg"></div>

    <!-- Slides wrapper with overflow:hidden. -->
    <div class="pswp__scroll-wrap">

        <!-- Container that holds slides. PhotoSwipe keeps only 3 slides in DOM to save memory. -->
        <!-- don't modify these 3 pswp__item elements, data is added later on. -->
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>

        <!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. -->
        <div class="pswp__ui pswp__ui--hidden">

            <div class="pswp__top-bar">

                <!--  Controls are self-explanatory. Order can be changed. -->

                <div class="pswp__counter"></div>

                <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>

                <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>

                <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

                <!-- Preloader demo https://codepen.io/dimsemenov/pen/yyBWoR -->
                <!-- element will get class pswp__preloader--active when preloader is running -->
                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                        <div class="pswp__preloader__cut">
                            <div class="pswp__preloader__donut"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div>
            </div>

            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>

            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>

            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>

        </div>

    </div>

</div>

@section scripts
{
    <script>
        var loader = `<div class="ui active centered indeterminate text inline loader unselectable" style="margin-top:40px;" id="loader">A carregar...</div>`;
        var fileBar = `<div class="ui green active progress mb-0" id="fileBar" style="display:none;"><div class="bar"><div class="progress"></div></div></div>`;
        var totalBar = `<div class="ui indicating progress" data-value="0" id="totalBar" style="display:none;"><div class="bar"><div class="progress"></div></div><div class="label">A processar...</div></div>`;

        var urls = [];

        function getPhotos(page) {
            $("#thumbnails").append(loader);
            $.ajax({
                type: "GET",
                url: siteUrl + "/Galerias/Thumbnails/@Model.ID?page="+page,
                success: function (resp) {
                    if (resp.noMorePhotos == null) {
                        $("#photosContainer").append(resp);
                        $('.ui.checkbox').checkbox();
                        page++;
                        getPhotos(page);
                    }
                    $("#loader").remove(); // Remove a barra de loading
                },
                error: function () {
                    $("#thumbnails").html(`
                        <div class="ui negative message mt-3">
                          <div class="header">
                            Ocorreu um erro
                          </div>
                          <p>Infelizmente não foi possível carregar as fotografias.</p>
                        </div>
                    `);
                }
            });
        }

        $(document).ready(function () {
            // Caso existam fotografias na galeria, pedi-las
            @if (Model.Fotografias.Count() != 0) {
                @: getPhotos(1);
            }
            // Iniciar a galeria do PhotoSwipe
            initPhotoSwipeFromDOM('.my-gallery');
        });

        document.getElementById('uploader').onsubmit = function (e) {
            e.preventDefault();

            var fileInput = document.getElementById('fileInput');
            initProgressBars(fileInput.files.length);

            upload(fileInput.files, 0);
        }

    document.getElementById('uploader').onchange = function (e) {
        var count = document.getElementById('fileInput').files.length;
        $("#fileCount").html((count!=0)? ` - ${count} Selecionada(s)` : "");
    }

        function upload(files, i) {
            $.ajax({
                type: "GET",
                url: siteUrl + `/Galerias/UploadSession?size=${files[i].size}&name=${files[i].name}`,
                success: function (resp) {
                    if (resp.success) {
                        // Visto que foi recebido um url de upload, fazer o upload do ficheiro.
                        uploadFile(files, i, resp);
                    } else {
                        // Notificação 'Noty'
                        new Noty({
                            type: 'error',
                            layout: 'bottomRight',
                            theme: 'bootstrap-v4',
                            text: resp.error,
                            timeout: 4000,
                            progressBar: true
                        }).show();
                    }
                },
                error: function () {
                    // Notificação 'Noty'
                    new Noty({
                        type: 'error',
                        layout: 'bottomRight',
                        theme: 'bootstrap-v4',
                        text: "Ocorreu um erro ao contactar o servidor.",
                        timeout: 4000,
                        progressBar: true
                    }).show();
                }
            });
        }

    function uploadFile(files, i, json) {

            var file = files[i];
            var loaded = 0;
            var step = 0.5 * 1024 * 1024;
            var total = file.size;
            var reader = new FileReader();
            var blob = file.slice(loaded, step); //a single chunk in starting of step size
            var chunksize = blob.size;
            reader.readAsBinaryString(blob);   // reading that chunk. when it read it, onload will be invoked

            reader.onload = function (e) {

                $.ajax({
                    url: json.url,
                    type: "PUT",
                    beforeSend: function (request) {
                        request.setRequestHeader("Content-Range", `bytes ${loaded}-${loaded + chunksize - 1}/${total}`);
                    },
                    contentType: false,
                    processData: false,
                    data: blob                    // d is the chunk got by readAsBinaryString(...)
                }).done(function (resp) {           // if 'd' is uploaded successfully then ->

                    loaded += step;

                    if (loaded <= total) {            // if file is not completely uploaded
                        blob = file.slice(loaded, loaded + step);  // getting next chunk
                        chunksize = blob.size;
                        reader.readAsBinaryString(blob);        //reading it through file reader which will call onload again. So it will happen recursively until file is completely uploaded.
                        $('#fileBar')
                            .progress({
                                percent: (loaded * 100) / total
                            })
                            ;
                    } else {                // if file is uploaded completely
                        loaded = total;            // just changed loaded which could be used to show status.
                        informServerOfImage(resp, json.contaId); // Enviar resposta da onedrive para o servidor para que este crie o ficheiro na BD
                        updateFileBar(100);
                        // Enquanto houver ficheiros para dar upload
                        if (i < files.length - 1) {
                            i++;
                            updateTotalBar();
                            // Dar upload ao próximo ficheiro
                            upload(files, i);
                        } else {
                            updateFileBar(100);
                            updateTotalBar();
                        }
                    }
                });
            };
        }

        function informServerOfImage(resp, contaId) {
            $.ajax({
                url: siteUrl + "/Galerias/RegisterFile",
                type: "POST",
                data: {
                    "galeriaId": @Model.ID,
                    "contaId": contaId,
                    "fileOnedriveId": resp.id,
                    "fileOnedriveName": resp.name
                },
                success: function (resp) {
                    $("#photosContainer").append(resp);
                    // Iniciar a galeria do PhotoSwipe
                    initPhotoSwipeFromDOM('.my-gallery');
                    $('.ui.checkbox').checkbox();
                }
            });
        }

        function initProgressBars(total) {
            // Dar reset às progress bars
            $("#progressBarsContainer").html(fileBar + "<br />" + totalBar);

            // Definir o total de ficheiros a serem carregados
            document.getElementById('totalBar').setAttribute("data-total", total);

            $('#fileBar').show();
            $('#totalBar').show()
                .progress({
                    label: 'ratio',
                    text: {
                        ratio: '{value} de {total}',
                        active: '{value} de {total} Carregadas',
                        success : '{total} Fotografia(s) Carregada(s)!'
                    }
                }
            );
        }

        function updateFileBar(percent) {
            $('#fileBar')
                .progress({
                    percent: percent,
                    text: {
                      active  : 'A carregar...',
                      success : 'Carregado!'
                    }
                }
            );
        }

        function updateTotalBar() {
            $('#totalBar')
                .progress('increment')
            ;
            // Quando a operação estiver concluida, esconder a barra de progresso de um ficheiro passado algum tempo
            if (document.getElementById('totalBar').getAttribute("data-percent") == 100) {
                // Notificação 'Noty'
                new Noty({
                    type: 'success',
                    layout: 'bottomRight',
                    theme: 'bootstrap-v4',
                    text: "Fotografias adicionadas com sucesso.",
                    timeout: 8000,
                    progressBar: true
                }).show();
            }
        }

    function clearCB() {
        $(".ui.toggle.checkbox.checked").click();
    }
    function selectAllCB() {
        clearCB();
         $(".ui.toggle.checkbox").click();
    }

        function pushToURLs(newUrl) {
            // Caso o url exista no array, retira-lo
            if (urls.includes(newUrl)) {
                let newArray = [];
                urls.forEach((url) => {
                    if (url !== newUrl) {
                        newArray.push(url);
                    }
                });
                urls = newArray;
            } else {
                urls.push(newUrl);
            }
        }

    function download(url) {
        var link = document.createElement("a");
        link.download = name;
        link.href = url;
        link.style.display = "none";
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        delete link;
    }

    function downloadSelected() {
        let links = urls;
        clearCB();
        if (links.length != 0) {
            let delay = 0;
            links.forEach(url => {
                if (url !== '') {
                    setTimeout(() => {
                        var link = document.createElement("a");
                        link.download = name;
                        link.href = url;
                        link.style.display = "none";
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                        delete link;
                    }, delay);
                    delay += 8000;
                }
            });
        }
    }

    </script>
}
