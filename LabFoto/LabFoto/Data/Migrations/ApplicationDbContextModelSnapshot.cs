// <auto-generated />
using System;
using LabFoto.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LabFoto.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LabFoto.Models.Tables.ContaOnedrive", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToken");

                    b.Property<string>("DriveId");

                    b.Property<string>("Quota_Remaining");

                    b.Property<string>("Quota_Total");

                    b.Property<string>("Quota_Used");

                    b.Property<string>("RefreshToken");

                    b.HasKey("ID");

                    b.ToTable("ContasOnedrive");
                });

            modelBuilder.Entity("LabFoto.Models.Tables.DataExecucao", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data");

                    b.HasKey("ID");

                    b.ToTable("DataExecucao");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Data = new DateTime(2019, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            Data = new DateTime(2019, 2, 24, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 3,
                            Data = new DateTime(2018, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 4,
                            Data = new DateTime(2019, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 5,
                            Data = new DateTime(2019, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 6,
                            Data = new DateTime(2018, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 7,
                            Data = new DateTime(2018, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 8,
                            Data = new DateTime(2019, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 9,
                            Data = new DateTime(2018, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 10,
                            Data = new DateTime(2018, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 11,
                            Data = new DateTime(2019, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("LabFoto.Models.Tables.Fotografia", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContaOnedriveFK");

                    b.Property<string>("DownloadUrl");

                    b.Property<string>("Formato");

                    b.Property<int>("FotografiaOrigemFK");

                    b.Property<int?>("FotografiaOrigemID");

                    b.Property<int>("GaleriaFK");

                    b.Property<string>("Nome");

                    b.Property<string>("Thumbnail_Large");

                    b.Property<string>("Thumbnail_Medium");

                    b.Property<string>("Thumbnail_Small");

                    b.HasKey("ID");

                    b.HasIndex("ContaOnedriveFK");

                    b.HasIndex("FotografiaOrigemID");

                    b.HasIndex("GaleriaFK");

                    b.ToTable("Fotografias");
                });

            modelBuilder.Entity("LabFoto.Models.Tables.Galeria", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataDeCriacao");

                    b.Property<string>("Nome");

                    b.Property<int>("ServicoFK");

                    b.HasKey("ID");

                    b.HasIndex("ServicoFK");

                    b.ToTable("Galerias");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DataDeCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Galeria1",
                            ServicoFK = 1
                        },
                        new
                        {
                            ID = 2,
                            DataDeCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Galeria2",
                            ServicoFK = 1
                        },
                        new
                        {
                            ID = 3,
                            DataDeCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Galeria3",
                            ServicoFK = 1
                        },
                        new
                        {
                            ID = 4,
                            DataDeCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Galeria4",
                            ServicoFK = 1
                        });
                });

            modelBuilder.Entity("LabFoto.Models.Tables.Galeria_Metadado", b =>
                {
                    b.Property<int>("MetadadoFK");

                    b.Property<int>("GaleriaFK");

                    b.HasKey("MetadadoFK", "GaleriaFK");

                    b.HasIndex("GaleriaFK");

                    b.ToTable("Galerias_Metadados");

                    b.HasData(
                        new
                        {
                            MetadadoFK = 1,
                            GaleriaFK = 1
                        },
                        new
                        {
                            MetadadoFK = 2,
                            GaleriaFK = 2
                        },
                        new
                        {
                            MetadadoFK = 3,
                            GaleriaFK = 3
                        },
                        new
                        {
                            MetadadoFK = 4,
                            GaleriaFK = 4
                        });
                });

            modelBuilder.Entity("LabFoto.Models.Tables.Metadado", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.HasKey("ID");

                    b.ToTable("Metadados");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Nome = "Metadado1"
                        },
                        new
                        {
                            ID = 2,
                            Nome = "Metadado2"
                        },
                        new
                        {
                            ID = 3,
                            Nome = "Metadado3"
                        },
                        new
                        {
                            ID = 4,
                            Nome = "Metadado4"
                        });
                });

            modelBuilder.Entity("LabFoto.Models.Tables.Requerente", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("Responsavel");

                    b.Property<string>("Telemovel")
                        .HasMaxLength(12);

                    b.HasKey("ID");

                    b.ToTable("Requerentes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "fernando@ipt.pt",
                            Nome = "Fernando",
                            Responsavel = "Fernando",
                            Telemovel = "123456789"
                        },
                        new
                        {
                            ID = 2,
                            Email = "maria@ipt.pt",
                            Nome = "Maria",
                            Responsavel = "Maria",
                            Telemovel = "987654321"
                        },
                        new
                        {
                            ID = 3,
                            Email = "joao@ipt.pt",
                            Nome = "João",
                            Responsavel = "Maria",
                            Telemovel = "987654321"
                        },
                        new
                        {
                            ID = 4,
                            Email = "jose@ipt.pt",
                            Nome = "José",
                            Responsavel = "José",
                            Telemovel = "123789456"
                        },
                        new
                        {
                            ID = 5,
                            Email = "manuel@ipt.pt",
                            Nome = "Manuel",
                            Responsavel = "Manuel",
                            Telemovel = "987321546"
                        });
                });

            modelBuilder.Entity("LabFoto.Models.Tables.Servico", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataDeCriacao");

                    b.Property<DateTime?>("DataEntrega");

                    b.Property<bool>("Hide");

                    b.Property<float?>("HorasEstudio");

                    b.Property<float?>("HorasPosProducao");

                    b.Property<string>("IdentificacaoObra")
                        .IsRequired();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Observacoes")
                        .HasMaxLength(512);

                    b.Property<int?>("RequerenteFK");

                    b.Property<float?>("Total");

                    b.HasKey("ID");

                    b.HasIndex("RequerenteFK");

                    b.ToTable("Servicos");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DataDeCriacao = new DateTime(2018, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataEntrega = new DateTime(2018, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hide = false,
                            HorasEstudio = 2f,
                            HorasPosProducao = 8f,
                            IdentificacaoObra = "Tira larga, de tecido ou de madeira, que se dispõe transversalmente como ornato na parte superior de uma cortina.",
                            Nome = "Sanefa",
                            Observacoes = "Sanefa degradada na parte superior",
                            RequerenteFK = 1,
                            Total = 40f
                        },
                        new
                        {
                            ID = 2,
                            DataDeCriacao = new DateTime(2019, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataEntrega = new DateTime(2019, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hide = false,
                            HorasEstudio = 6f,
                            HorasPosProducao = 17f,
                            IdentificacaoObra = "Plantação de árvores na escola.",
                            Nome = "Dia da árvore",
                            Observacoes = "Presença do presidente nas plantações.",
                            RequerenteFK = 2,
                            Total = 65f
                        },
                        new
                        {
                            ID = 3,
                            DataDeCriacao = new DateTime(2019, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataEntrega = new DateTime(2019, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hide = false,
                            HorasEstudio = 4f,
                            HorasPosProducao = 10f,
                            IdentificacaoObra = "Vasos/Jarrões a parecem integrados em retábulos,tronos, mesas de altar em várias igrejas em Tomar.",
                            Nome = "Vaso talha prata dourada",
                            Observacoes = "",
                            RequerenteFK = 1,
                            Total = 45f
                        },
                        new
                        {
                            ID = 4,
                            DataDeCriacao = new DateTime(2017, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataEntrega = new DateTime(2017, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hide = false,
                            HorasEstudio = 20f,
                            HorasPosProducao = 43f,
                            IdentificacaoObra = "Seis cadeiras em madeira de cerejeira com acabamento em verniz",
                            Nome = "Conjunto de Cadeiras",
                            Observacoes = "",
                            RequerenteFK = 1,
                            Total = 125f
                        },
                        new
                        {
                            ID = 5,
                            DataDeCriacao = new DateTime(2018, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hide = false,
                            HorasEstudio = 3f,
                            HorasPosProducao = 4f,
                            IdentificacaoObra = "Festa tradicional da aldeia de Azinhaga",
                            Nome = "Festa do Bodo",
                            Observacoes = "Muito bom",
                            RequerenteFK = 3,
                            Total = 0f
                        },
                        new
                        {
                            ID = 6,
                            DataDeCriacao = new DateTime(2019, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hide = false,
                            HorasEstudio = 0f,
                            HorasPosProducao = 0f,
                            IdentificacaoObra = "Fotos da tabanca do Maltez",
                            Nome = "Feira do Cavalo, Golegã",
                            Observacoes = "Grande festa, aprovado",
                            RequerenteFK = 4,
                            Total = 0f
                        },
                        new
                        {
                            ID = 7,
                            DataDeCriacao = new DateTime(2018, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataEntrega = new DateTime(2018, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hide = false,
                            HorasEstudio = 6f,
                            HorasPosProducao = 2f,
                            IdentificacaoObra = "Um cavalo queimado no matadouro",
                            Nome = "Estátua do Cavalo queimado",
                            Observacoes = "",
                            RequerenteFK = 2,
                            Total = 0f
                        },
                        new
                        {
                            ID = 8,
                            DataDeCriacao = new DateTime(2019, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hide = false,
                            HorasEstudio = 4f,
                            HorasPosProducao = 2f,
                            IdentificacaoObra = "Exposição na galeria de Sintra",
                            Nome = "Exposição de Arte contemporânea",
                            Observacoes = "",
                            RequerenteFK = 5,
                            Total = 0f
                        });
                });

            modelBuilder.Entity("LabFoto.Models.Tables.ServicoSolicitado", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("ServicosSolicitados");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Nome = "Luz Visível"
                        },
                        new
                        {
                            ID = 2,
                            Nome = "Luz U.V"
                        },
                        new
                        {
                            ID = 3,
                            Nome = "Rasante"
                        },
                        new
                        {
                            ID = 4,
                            Nome = "Infra-red"
                        },
                        new
                        {
                            ID = 5,
                            Nome = "Luz Trasmitida"
                        });
                });

            modelBuilder.Entity("LabFoto.Models.Tables.Servico_DataExecucao", b =>
                {
                    b.Property<int>("DataExecucaoFK");

                    b.Property<int>("ServicoFK");

                    b.HasKey("DataExecucaoFK", "ServicoFK");

                    b.HasIndex("ServicoFK");

                    b.ToTable("Servicos_DatasExecucao");

                    b.HasData(
                        new
                        {
                            DataExecucaoFK = 1,
                            ServicoFK = 1
                        },
                        new
                        {
                            DataExecucaoFK = 2,
                            ServicoFK = 2
                        },
                        new
                        {
                            DataExecucaoFK = 3,
                            ServicoFK = 3
                        },
                        new
                        {
                            DataExecucaoFK = 4,
                            ServicoFK = 4
                        },
                        new
                        {
                            DataExecucaoFK = 5,
                            ServicoFK = 5
                        },
                        new
                        {
                            DataExecucaoFK = 6,
                            ServicoFK = 6
                        },
                        new
                        {
                            DataExecucaoFK = 7,
                            ServicoFK = 7
                        },
                        new
                        {
                            DataExecucaoFK = 8,
                            ServicoFK = 8
                        },
                        new
                        {
                            DataExecucaoFK = 9,
                            ServicoFK = 3
                        },
                        new
                        {
                            DataExecucaoFK = 10,
                            ServicoFK = 3
                        },
                        new
                        {
                            DataExecucaoFK = 11,
                            ServicoFK = 3
                        },
                        new
                        {
                            DataExecucaoFK = 11,
                            ServicoFK = 8
                        },
                        new
                        {
                            DataExecucaoFK = 10,
                            ServicoFK = 8
                        },
                        new
                        {
                            DataExecucaoFK = 5,
                            ServicoFK = 7
                        },
                        new
                        {
                            DataExecucaoFK = 2,
                            ServicoFK = 7
                        },
                        new
                        {
                            DataExecucaoFK = 8,
                            ServicoFK = 5
                        });
                });

            modelBuilder.Entity("LabFoto.Models.Tables.Servico_ServicoSolicitado", b =>
                {
                    b.Property<int>("ServicoSolicitadoFK");

                    b.Property<int>("ServicoFK");

                    b.HasKey("ServicoSolicitadoFK", "ServicoFK");

                    b.HasIndex("ServicoFK");

                    b.ToTable("Servicos_ServicosSolicitados");

                    b.HasData(
                        new
                        {
                            ServicoSolicitadoFK = 3,
                            ServicoFK = 1
                        },
                        new
                        {
                            ServicoSolicitadoFK = 2,
                            ServicoFK = 1
                        },
                        new
                        {
                            ServicoSolicitadoFK = 4,
                            ServicoFK = 2
                        },
                        new
                        {
                            ServicoSolicitadoFK = 1,
                            ServicoFK = 2
                        },
                        new
                        {
                            ServicoSolicitadoFK = 5,
                            ServicoFK = 3
                        },
                        new
                        {
                            ServicoSolicitadoFK = 1,
                            ServicoFK = 4
                        },
                        new
                        {
                            ServicoSolicitadoFK = 2,
                            ServicoFK = 4
                        },
                        new
                        {
                            ServicoSolicitadoFK = 3,
                            ServicoFK = 4
                        },
                        new
                        {
                            ServicoSolicitadoFK = 4,
                            ServicoFK = 4
                        },
                        new
                        {
                            ServicoSolicitadoFK = 2,
                            ServicoFK = 5
                        },
                        new
                        {
                            ServicoSolicitadoFK = 5,
                            ServicoFK = 5
                        },
                        new
                        {
                            ServicoSolicitadoFK = 2,
                            ServicoFK = 6
                        },
                        new
                        {
                            ServicoSolicitadoFK = 4,
                            ServicoFK = 6
                        },
                        new
                        {
                            ServicoSolicitadoFK = 5,
                            ServicoFK = 7
                        },
                        new
                        {
                            ServicoSolicitadoFK = 2,
                            ServicoFK = 7
                        },
                        new
                        {
                            ServicoSolicitadoFK = 3,
                            ServicoFK = 7
                        },
                        new
                        {
                            ServicoSolicitadoFK = 1,
                            ServicoFK = 8
                        },
                        new
                        {
                            ServicoSolicitadoFK = 3,
                            ServicoFK = 8
                        });
                });

            modelBuilder.Entity("LabFoto.Models.Tables.Servico_Tipo", b =>
                {
                    b.Property<int>("TipoFK");

                    b.Property<int>("ServicoFK");

                    b.HasKey("TipoFK", "ServicoFK");

                    b.HasIndex("ServicoFK");

                    b.ToTable("Servicos_Tipos");

                    b.HasData(
                        new
                        {
                            TipoFK = 1,
                            ServicoFK = 1
                        },
                        new
                        {
                            TipoFK = 2,
                            ServicoFK = 2
                        },
                        new
                        {
                            TipoFK = 1,
                            ServicoFK = 3
                        },
                        new
                        {
                            TipoFK = 3,
                            ServicoFK = 4
                        },
                        new
                        {
                            TipoFK = 2,
                            ServicoFK = 5
                        },
                        new
                        {
                            TipoFK = 1,
                            ServicoFK = 6
                        },
                        new
                        {
                            TipoFK = 3,
                            ServicoFK = 6
                        },
                        new
                        {
                            TipoFK = 4,
                            ServicoFK = 7
                        },
                        new
                        {
                            TipoFK = 4,
                            ServicoFK = 8
                        });
                });

            modelBuilder.Entity("LabFoto.Models.Tables.Tipo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Tipos");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Nome = "Académico"
                        },
                        new
                        {
                            ID = 2,
                            Nome = "Investigação"
                        },
                        new
                        {
                            ID = 3,
                            Nome = "Serviço Exterior"
                        },
                        new
                        {
                            ID = 4,
                            Nome = "Pessoal"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "efbd71e2-da58-467d-b5a7-38c0fdaeb8c1",
                            ConcurrencyStamp = "6a09aa85-bbf6-435f-bc13-c17607951fb2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "73a9eaf0-43f6-43a6-bf98-f0bb4e8a93b7",
                            RoleId = "efbd71e2-da58-467d-b5a7-38c0fdaeb8c1"
                        },
                        new
                        {
                            UserId = "fcbbb3e1-e6ce-43b3-922d-f7342c59e5f1",
                            RoleId = "efbd71e2-da58-467d-b5a7-38c0fdaeb8c1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LabFoto.Models.Utilizador", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Nome");

                    b.HasDiscriminator().HasValue("Utilizador");

                    b.HasData(
                        new
                        {
                            Id = "73a9eaf0-43f6-43a6-bf98-f0bb4e8a93b7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f37c4640-0200-434a-a30c-f1512bf348ed",
                            Email = "admin1@admin1.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@ADMIN1.COM",
                            NormalizedUserName = "ADMIN1@ADMIN1.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJZ4fc+3TZyZn5arEG0xs0mzmB+jU3VJRN5UfsPqDQdZklBVvNYQaU4Ie/Lq5lRLKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin1@admin1.com",
                            Nome = "Admin1"
                        },
                        new
                        {
                            Id = "fcbbb3e1-e6ce-43b3-922d-f7342c59e5f1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f0e9733-886f-4fe2-94af-2cb5a751e77e",
                            Email = "user1@user1.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@USER1.COM",
                            NormalizedUserName = "USER1@USER1.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJFGTrIBTpWwFGAPPTB5tI4LS7NpUrgB+8abiG+XnhtgSTHOG4HBUReAcXqklKbQMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user1@user1.com",
                            Nome = "User1"
                        });
                });

            modelBuilder.Entity("LabFoto.Models.Tables.Fotografia", b =>
                {
                    b.HasOne("LabFoto.Models.Tables.ContaOnedrive", "ContaOnedrive")
                        .WithMany()
                        .HasForeignKey("ContaOnedriveFK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LabFoto.Models.Tables.Fotografia", "FotografiaOrigem")
                        .WithMany()
                        .HasForeignKey("FotografiaOrigemID");

                    b.HasOne("LabFoto.Models.Tables.Galeria", "Galeria")
                        .WithMany("Fotografias")
                        .HasForeignKey("GaleriaFK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LabFoto.Models.Tables.Galeria", b =>
                {
                    b.HasOne("LabFoto.Models.Tables.Servico", "Servico")
                        .WithMany()
                        .HasForeignKey("ServicoFK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LabFoto.Models.Tables.Galeria_Metadado", b =>
                {
                    b.HasOne("LabFoto.Models.Tables.Galeria", "Galeria")
                        .WithMany("Galerias_Metadados")
                        .HasForeignKey("GaleriaFK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LabFoto.Models.Tables.Metadado", "Metadado")
                        .WithMany("Galerias_Metadados")
                        .HasForeignKey("MetadadoFK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LabFoto.Models.Tables.Servico", b =>
                {
                    b.HasOne("LabFoto.Models.Tables.Requerente", "Requerente")
                        .WithMany("Servicos")
                        .HasForeignKey("RequerenteFK");
                });

            modelBuilder.Entity("LabFoto.Models.Tables.Servico_DataExecucao", b =>
                {
                    b.HasOne("LabFoto.Models.Tables.DataExecucao", "DataExecucao")
                        .WithMany("DatasExecucao_Servicos")
                        .HasForeignKey("DataExecucaoFK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LabFoto.Models.Tables.Servico", "Servico")
                        .WithMany("Servicos_DataExecucao")
                        .HasForeignKey("ServicoFK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LabFoto.Models.Tables.Servico_ServicoSolicitado", b =>
                {
                    b.HasOne("LabFoto.Models.Tables.Servico", "Servico")
                        .WithMany("Servicos_ServicosSolicitados")
                        .HasForeignKey("ServicoFK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LabFoto.Models.Tables.ServicoSolicitado", "ServicoSolicitado")
                        .WithMany("ServicosSolicitados_Servicos")
                        .HasForeignKey("ServicoSolicitadoFK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LabFoto.Models.Tables.Servico_Tipo", b =>
                {
                    b.HasOne("LabFoto.Models.Tables.Servico", "Servico")
                        .WithMany("Servicos_Tipos")
                        .HasForeignKey("ServicoFK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LabFoto.Models.Tables.Tipo", "Tipo")
                        .WithMany("Tipos_Servicos")
                        .HasForeignKey("TipoFK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
